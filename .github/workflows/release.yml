name: Release

on:
  push:
    tags:
      - v*

env:
  GO_VERSION: '1.24.2'

jobs:
  prepare-sources-with-deps:
    name: Prepare sources with deps
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Get SFTPGo version
        id: get_version
        run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> "$GITHUB_OUTPUT"

      - name: Prepare release
        run: |
          go mod vendor
          echo "${SFTPGO_VERSION}" > VERSION.txt
          tar cJvf sftpgo_${SFTPGO_VERSION}_src_with_deps.tar.xz *
        env:
          SFTPGO_VERSION: ${{ steps.get_version.outputs.VERSION }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: sftpgo_${{ steps.get_version.outputs.VERSION }}_src_with_deps.tar.xz
          path: ./sftpgo_${{ steps.get_version.outputs.VERSION }}_src_with_deps.tar.xz
          retention-days: 1

  prepare-linux:
    name: Prepare Linux binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - arch: amd64
            go-arch: amd64
            deb-arch: amd64
            rpm-arch: x86_64
            tar-arch: x86_64

    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        if: ${{ matrix.arch == 'amd64' }}

        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Get SFTPGo version
        id: get_version
        run: |
          echo "SFTPGO_VERSION=${GITHUB_REF/refs\/tags\//}" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Build on amd64
        if: ${{ matrix.arch == 'amd64' }}
        run: |
          CGO_ENABLED=0 go build -ldflags "-s -w -X github.com/drakkan/sftpgo/version.commit=`git describe --always --dirty` -X github.com/drakkan/sftpgo/version.date=`date -u +%FT%TZ`" -o sftpgo
          mkdir -p output/{init,sqlite,bash_completion,zsh_completion}
          echo "For documentation please take a look here:" > output/README.txt
          echo "" >> output/README.txt
          echo "https://github.com/drakkan/sftpgo/blob/${SFTPGO_VERSION}/README.md" >> output/README.txt
          cp LICENSE output/
          cp sftpgo.json output/
          cp -r templates output/
          cp -r static output/
          cp init/sftpgo.service output/init/
          ./sftpgo gen completion bash > output/bash_completion/sftpgo
          ./sftpgo gen completion zsh > output/zsh_completion/_sftpgo
          ./sftpgo gen man -d output/man/man1
          gzip output/man/man1/*
          cp sftpgo output/
          cd output
          tar cJvf sftpgo_${SFTPGO_VERSION}_linux_${{ matrix.tar-arch }}.tar.xz *
          cd ..
        env:
          SFTPGO_VERSION: ${{ steps.get_version.outputs.SFTPGO_VERSION }}

      - name: Upload build artifact for ${{ matrix.arch }}
        uses: actions/upload-artifact@v4
        with:
          name: sftpgo_${{ steps.get_version.outputs.SFTPGO_VERSION }}_linux_${{ matrix.tar-arch }}.tar.xz
          path: ./output/sftpgo_${{ steps.get_version.outputs.SFTPGO_VERSION }}_linux_${{ matrix.tar-arch }}.tar.xz
          retention-days: 1

      - name: Build Packages
        id: build_linux_pkgs
        run: |
          export NFPM_ARCH=${{ matrix.go-arch }}
          cd pkgs
          ./build.sh
          PKG_VERSION=${SFTPGO_VERSION:1}
          echo "pkg-version=${PKG_VERSION}" >> "$GITHUB_OUTPUT"
        env:
          SFTPGO_VERSION: ${{ steps.get_version.outputs.SFTPGO_VERSION }}

      - name: Upload Deb Package
        uses: actions/upload-artifact@v4
        with:
          name: sftpgo_${{ steps.build_linux_pkgs.outputs.pkg-version }}-1_${{ matrix.deb-arch}}.deb
          path: ./pkgs/dist/deb/sftpgo_*.deb
          retention-days: 1

      - name: Upload RPM Package
        uses: actions/upload-artifact@v4
        with:
          name: sftpgo-${{ steps.build_linux_pkgs.outputs.pkg-version }}-1.${{ matrix.rpm-arch}}.rpm
          path: ./pkgs/dist/rpm/sftpgo-*.rpm
          retention-days: 1

  prepare-linux-bundle:
    name: Prepare Linux bundle
    needs: prepare-linux
    runs-on: ubuntu-latest

    steps:
      - name: Get SFTPGo version
        id: get_version
        run: |
          echo "SFTPGO_VERSION=${GITHUB_REF/refs\/tags\//}" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Download amd64 artifact
        uses: actions/download-artifact@v4
        with:
          name: sftpgo_${{ steps.get_version.outputs.SFTPGO_VERSION }}_linux_x86_64.tar.xz

      - name: Build bundle
        shell: bash
        run: |
          mkdir bundle
          cd bundle
          tar xvf ../sftpgo_${SFTPGO_VERSION}_linux_x86_64.tar.xz
          tar cJvf sftpgo_${SFTPGO_VERSION}_linux_bundle.tar.xz *
          cd ..
        env:
          SFTPGO_VERSION: ${{ steps.get_version.outputs.SFTPGO_VERSION }}

      - name: Upload Linux bundle
        uses: actions/upload-artifact@v4
        with:
          name: sftpgo_${{ steps.get_version.outputs.SFTPGO_VERSION }}_linux_bundle.tar.xz
          path: ./bundle/sftpgo_${{ steps.get_version.outputs.SFTPGO_VERSION }}_linux_bundle.tar.xz
          retention-days: 1

  create-release:
    name: Release
    needs: [prepare-linux-bundle, prepare-sources-with-deps]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Get versions
        id: get_version
        run: |
          SFTPGO_VERSION=${GITHUB_REF/refs\/tags\//}
          PKG_VERSION=${SFTPGO_VERSION:1}
          echo "SFTPGO_VERSION=${SFTPGO_VERSION}" >> "$GITHUB_OUTPUT"
          echo "PKG_VERSION=${PKG_VERSION}" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: sftpgo{_,-}*{tar.xz,.rpm,.deb}
          merge-multiple: true

      - name: Create pre-release
        if: ${{ contains(github.ref_name, '-pre') }}
        run: |
          gh release create "${SFTPGO_VERSION}" -p --latest=false
          gh release upload "${SFTPGO_VERSION}" sftpgo_*.xz --clobber
          gh release upload "${SFTPGO_VERSION}" sftpgo_*.deb --clobber
          gh release upload "${SFTPGO_VERSION}" sftpgo-*.rpm --clobber
          gh release view "${SFTPGO_VERSION}"
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          SFTPGO_VERSION: ${{ steps.get_version.outputs.SFTPGO_VERSION }}

      - name: Create latest release
        if: ${{ ! contains(github.ref_name, '-pre') }}
        run: |
          gh release create "${SFTPGO_VERSION}"
          gh release upload "${SFTPGO_VERSION}" sftpgo_*.xz --clobber
          gh release upload "${SFTPGO_VERSION}" sftpgo_*.deb --clobber
          gh release upload "${SFTPGO_VERSION}" sftpgo-*.rpm --clobber
          gh release view "${SFTPGO_VERSION}"
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          SFTPGO_VERSION: ${{ steps.get_version.outputs.SFTPGO_VERSION }}